package nl.peterbjornx.posnk.memleaktool;

public class MemoryBlock implements Comparable {
	private long start_address;
	private long size;
	
	public MemoryBlock(long start_address, long size) {
		this.start_address = start_address;
		this.size = size;
	}
	
	public long getStart() {
		return start_address;
	}
	
	public long getSize() {
		return size;
	}
	
	public MemoryBlock split(long a_size) {
		MemoryBlock split_off;
		if (a_size >= size)
				throw new RuntimeException("Tried to split past end");
		if (a_size < 0)
				throw new RuntimeException("Tried to split before beginning");
		split_off = new MemoryBlock(start_address + a_size, size - a_size);
		size = a_size;
		return split_off;
	}
	
	public boolean overlap(MemoryBlock b) {
		return ((b.start_address >= start_address) && (b.start_address < (start_address + size))) || 
			   ((start_address >= b.start_address) && (start_address < (b.start_address + b.size)));
	}
	
	public boolean merge(MemoryBlock b) {
		long b_end = b.start_address + b.size;
		long end = start_address + size;
		if (end == b.start_address) {
			size += b.size;
			b.size = size;
			b.start_address = start_address;
			return true;
			
		} else if (b_end == start_address) {
			b.size += size;
			start_address = b.start_address;
			size = b.size;
			return true;
		} else
			return false;
	}

	public void setStart(long l) {
		start_address = l;		
	}

	public void setSize(long l) {
		size = l;		
	}

	@Override
	public int compareTo(Object arg0) {
		MemoryBlock b = (MemoryBlock) arg0;
		return start - b.start;
	}
}
